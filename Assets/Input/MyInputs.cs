//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/MyInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputs"",
    ""maps"": [
        {
            ""name"": ""MyInputMap"",
            ""id"": ""364162bd-b7ab-4688-949d-d974e6780133"",
            ""actions"": [
                {
                    ""name"": ""MoveCannon"",
                    ""type"": ""Button"",
                    ""id"": ""3981a567-5690-46a9-846a-1048c253c698"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCannon"",
                    ""type"": ""Button"",
                    ""id"": ""afc9f850-1295-42ee-8263-5ee5bc4ff9e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""fd411e69-b5a9-4851-8c49-a80c0be3f264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveTank"",
                    ""type"": ""Value"",
                    ""id"": ""6f16eb4f-2fbe-4481-b9f5-d894604db152"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""771aeac7-a505-4cd6-9f91-0fdc822266a3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d407cfe6-dd7f-4843-8ba6-c5af745c182b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bf7b2805-9c2d-4fda-8279-81f4f69eb46e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0c52719b-feb1-490b-a72f-8d48c592492e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""09b7469d-77a0-4c0e-8171-c6984dd9667b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7d1a8081-291f-4eda-8fe3-2fb7fb4b0f84"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""500c9e08-df40-4938-aae5-97b51dff7d9a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCannon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e6dc4dfc-bb80-4224-8cf8-b344620d76a8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""86a0a20c-a944-4848-a69e-b8231a1b6831"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8a705775-9c95-433b-8e6b-193613759040"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""88487cad-de4a-4be7-9d6a-493e10a30b46"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1d9be7c6-0b76-4ec1-8727-7e84bf14ae19"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""093bd370-d6a4-4493-9816-1affd83f9c47"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MyInputMap
        m_MyInputMap = asset.FindActionMap("MyInputMap", throwIfNotFound: true);
        m_MyInputMap_MoveCannon = m_MyInputMap.FindAction("MoveCannon", throwIfNotFound: true);
        m_MyInputMap_RotateCannon = m_MyInputMap.FindAction("RotateCannon", throwIfNotFound: true);
        m_MyInputMap_Fire = m_MyInputMap.FindAction("Fire", throwIfNotFound: true);
        m_MyInputMap_MoveTank = m_MyInputMap.FindAction("MoveTank", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyInputMap
    private readonly InputActionMap m_MyInputMap;
    private List<IMyInputMapActions> m_MyInputMapActionsCallbackInterfaces = new List<IMyInputMapActions>();
    private readonly InputAction m_MyInputMap_MoveCannon;
    private readonly InputAction m_MyInputMap_RotateCannon;
    private readonly InputAction m_MyInputMap_Fire;
    private readonly InputAction m_MyInputMap_MoveTank;
    public struct MyInputMapActions
    {
        private @MyInputs m_Wrapper;
        public MyInputMapActions(@MyInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCannon => m_Wrapper.m_MyInputMap_MoveCannon;
        public InputAction @RotateCannon => m_Wrapper.m_MyInputMap_RotateCannon;
        public InputAction @Fire => m_Wrapper.m_MyInputMap_Fire;
        public InputAction @MoveTank => m_Wrapper.m_MyInputMap_MoveTank;
        public InputActionMap Get() { return m_Wrapper.m_MyInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyInputMapActions set) { return set.Get(); }
        public void AddCallbacks(IMyInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MyInputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MyInputMapActionsCallbackInterfaces.Add(instance);
            @MoveCannon.started += instance.OnMoveCannon;
            @MoveCannon.performed += instance.OnMoveCannon;
            @MoveCannon.canceled += instance.OnMoveCannon;
            @RotateCannon.started += instance.OnRotateCannon;
            @RotateCannon.performed += instance.OnRotateCannon;
            @RotateCannon.canceled += instance.OnRotateCannon;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @MoveTank.started += instance.OnMoveTank;
            @MoveTank.performed += instance.OnMoveTank;
            @MoveTank.canceled += instance.OnMoveTank;
        }

        private void UnregisterCallbacks(IMyInputMapActions instance)
        {
            @MoveCannon.started -= instance.OnMoveCannon;
            @MoveCannon.performed -= instance.OnMoveCannon;
            @MoveCannon.canceled -= instance.OnMoveCannon;
            @RotateCannon.started -= instance.OnRotateCannon;
            @RotateCannon.performed -= instance.OnRotateCannon;
            @RotateCannon.canceled -= instance.OnRotateCannon;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @MoveTank.started -= instance.OnMoveTank;
            @MoveTank.performed -= instance.OnMoveTank;
            @MoveTank.canceled -= instance.OnMoveTank;
        }

        public void RemoveCallbacks(IMyInputMapActions instance)
        {
            if (m_Wrapper.m_MyInputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMyInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MyInputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MyInputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MyInputMapActions @MyInputMap => new MyInputMapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMyInputMapActions
    {
        void OnMoveCannon(InputAction.CallbackContext context);
        void OnRotateCannon(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnMoveTank(InputAction.CallbackContext context);
    }
}
